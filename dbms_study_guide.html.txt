<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Interactive Database Systems Study Guide</title>
   <script src="https://cdn.tailwindcss.com"></script>
   <style>
       body { font-family: 'Inter', sans-serif; }
       @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
       .content-section { display: none; }
       .content-section.active { display: block; }
       .nav-link { transition: all 0.3s ease; }
       .nav-link.active { color: #2563eb; border-bottom-color: #2563eb; }
       .nav-link:not(.active) { border-bottom-color: transparent; }
       .quiz-question { cursor: pointer; }
       .quiz-answer { display: none; max-height: 0; overflow: hidden; transition: max-height 0.5s ease-in-out, padding 0.5s ease-in-out; }
       .quiz-question.open .quiz-answer { display: block; max-height: 500px; padding-top: 1rem; }
       .drawback-item.active { background-color: #eff6ff; border-left-color: #2563eb; transform: translateX(10px); }
       .drawback-item { transition: all 0.3s ease; }
       .abstraction-level:hover .level-details, .arch-tier:hover .level-details { opacity: 1; transform: translateY(0); }
       .level-details { opacity: 0; transform: translateY(10px); transition: all 0.3s ease; pointer-events: none; }
       .arch-tier:hover .level-details { pointer-events: auto; }
       
       @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
       .fade-in { animation: fadeIn 0.6s ease-out forwards; }

       @keyframes slideIn { from { transform: translateX(-100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } }
       .instance-row { animation: slideIn 0.5s ease-out forwards; }

       .query-flow-arrow { position: relative; }
       .query-flow-arrow::after {
           content: '→';
           position: absolute;
           left: 100%;
           top: 50%;
           transform: translateY(-50%);
           font-size: 2rem;
           color: #9ca3af;
           animation: pulse 2s infinite;
       }
       @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.3; } }
   </style>
   <!-- Chosen Palette: Calm Harmony -->
   <!-- Application Structure Plan: The application is structured as a single-page app with a sticky top navigation bar to switch between thematic sections: 'Foundations', 'Models & Languages', 'People & Systems', 'Test Knowledge', and 'Glossary'. This non-linear, thematic structure was chosen over the report's linear format to empower users to directly access topics of interest, facilitating both targeted learning and holistic review. Key interactions include clickable diagrams to compare concepts (e.g., File Systems vs. DBMS), hover-to-reveal details for architectural concepts, an interactive accordion for the quiz, and a live search for the glossary, all designed to make learning more engaging and efficient. -->
   <!-- Visualization & Content Choices: Report Info: File System Drawbacks -> Goal: Compare/Inform -> Viz: Interactive list -> Interaction: Click list item to reveal corresponding DBMS solution -> Justification: Actively engages user in comparing the two systems. | Report Info: Levels of Abstraction -> Goal: Organize/Inform -> Viz: Layered HTML/CSS diagram -> Interaction: Hover over a level to see details -> Justification: Visually represents the hierarchy and provides information on demand. | Report Info: Quiz -> Goal: Assess/Engage -> Viz: HTML Accordion -> Interaction: Click question to toggle answer visibility -> Justification: Creates an active self-assessment experience. | Report Info: Glossary -> Goal: Inform/Reference -> Viz: Searchable list -> Interaction: User types in search bar to filter terms -> Justification: Provides a highly efficient way to look up definitions. All visualizations are built with HTML/CSS/JS to adhere to the no-SVG/Mermaid constraint. -->
   <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
</head>
<body class="bg-gray-50 text-gray-800">

   <div class="container mx-auto p-4 md:p-8">
       <header class="text-center mb-8">
           <h1 class="text-4xl md:text-5xl font-bold text-gray-900">Database Systems Study Guide</h1>
           <p class="text-lg text-gray-600 mt-2">An interactive guide to core concepts, models, and architectures.</p>
       </header>

       <nav class="sticky top-0 bg-gray-50/80 backdrop-blur-sm z-10 mb-8 border-b border-gray-200">
           <ul class="flex flex-wrap justify-center -mb-px">
               <li><a href="#foundations" class="nav-link inline-block p-4 border-b-2 font-semibold text-gray-600 hover:text-blue-600 hover:border-blue-300">Foundations</a></li>
               <li><a href="#models" class="nav-link inline-block p-4 border-b-2 font-semibold text-gray-600 hover:text-blue-600 hover:border-blue-300">Models & Languages</a></li>
               <li><a href="#systems" class="nav-link inline-block p-4 border-b-2 font-semibold text-gray-600 hover:text-blue-600 hover:border-blue-300">People & Systems</a></li>
               <li><a href="#quiz" class="nav-link inline-block p-4 border-b-2 font-semibold text-gray-600 hover:text-blue-600 hover:border-blue-300">Test Knowledge</a></li>
               <li><a href="#glossary" class="nav-link inline-block p-4 border-b-2 font-semibold text-gray-600 hover:text-blue-600 hover:border-blue-300">Glossary</a></li>
           </ul>
       </nav>

       <main>
           <section id="foundations" class="content-section space-y-16">
               <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">File Systems vs. DBMS</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">Traditional file systems have several critical drawbacks for data management. Database Management Systems (DBMS) were developed specifically to solve these problems. Click on each drawback below to see how a DBMS provides a solution.</p>
                   <div class="grid grid-cols-1 md:grid-cols-2 gap-8 items-start">
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-xl font-semibold mb-4 text-red-600">Drawbacks of File Systems</h3>
                           <div id="drawbacks-list" class="space-y-2"></div>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200 min-h-[200px]">
                           <h3 class="text-xl font-semibold mb-4 text-green-600">The DBMS Solution</h3>
                           <div id="solution-display" class="text-gray-700">
                               <p class="text-gray-500">Select a drawback to see the solution.</p>
                           </div>
                       </div>
                   </div>
               </div>

               <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">Schemas vs. Instances</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">A database's design (schema) is distinct from the data it holds at any moment (instance). The schema is the blueprint, while the instance is the actual house built from it. Click the button to simulate adding data and see the instance change.</p>
                   <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3">Schema (The Blueprint)</h3>
                           <p class="text-gray-700 mb-4">The overall design of the database. It defines the structure, data types, and relationships. It rarely changes.</p>
                           <div class="font-mono bg-gray-100 p-4 rounded-md text-sm text-gray-800">
                               <p><span class="font-bold">TABLE:</span> Users</p>
                               <p><span class="font-bold text-blue-600">COLUMN 1:</span> UserID (Integer, Primary Key)</p>
                               <p><span class="font-bold text-blue-600">COLUMN 2:</span> Name (String)</p>
                               <p><span class="font-bold text-blue-600">COLUMN 3:</span> Email (String, Unique)</p>
                           </div>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3">Instance (The Data)</h3>
                           <p class="text-gray-700 mb-4">A snapshot of the data in the database at a specific moment. It changes frequently.</p>
                           <div class="font-mono bg-gray-100 p-4 rounded-md text-sm text-gray-800 overflow-x-auto">
                               <table class="w-full text-left">
                                   <thead><tr><th class="p-2">UserID</th><th class="p-2">Name</th><th class="p-2">Email</th></tr></thead>
                                   <tbody id="instance-table-body">
                                       <tr class="bg-white"><td class="p-2">1</td><td class="p-2">Alice</td><td class="p-2">alice@web.com</td></tr>
                                       <tr class="bg-gray-50"><td class="p-2">2</td><td class="p-2">Bob</td><td class="p-2">bob@web.com</td></tr>
                                   </tbody>
                               </table>
                           </div>
                           <button id="add-instance-btn" class="mt-4 bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-600 transition-colors">Add New User</button>
                       </div>
                   </div>
               </div>

               <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">Levels of Data Abstraction</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">A major goal of a DBMS is to provide an abstract view of the data, hiding complex storage details. This is achieved through three levels of abstraction. Hover over each level to learn more.</p>
                   <div class="grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
                       <div class="abstraction-level bg-white p-6 rounded-lg shadow-sm border border-gray-200 relative">
                           <div class="text-5xl mb-3">🏢</div>
                           <h3 class="text-xl font-semibold text-blue-700">View Level</h3>
                           <p class="text-gray-500">How users see the data.</p>
                           <div class="level-details absolute bottom-full left-0 right-0 mb-2 p-3 bg-gray-800 text-white text-sm rounded-lg shadow-lg w-full z-20">
                               Describes only part of the entire database relevant to a particular user group. Hides details (e.g., salary column) for simplicity and security.
                           </div>
                       </div>
                       <div class="abstraction-level bg-white p-6 rounded-lg shadow-sm border border-gray-200 relative">
                           <div class="text-5xl mb-3">📜</div>
                           <h3 class="text-xl font-semibold text-blue-700">Logical Level</h3>
                           <p class="text-gray-500">What data is stored.</p>
                           <div class="level-details absolute bottom-full left-0 right-0 mb-2 p-3 bg-gray-800 text-white text-sm rounded-lg shadow-lg w-full z-20">
                               Describes the data and relationships within the whole database, independent of physical storage. This is the level where DBAs work.
                           </div>
                       </div>
                       <div class="abstraction-level bg-white p-6 rounded-lg shadow-sm border border-gray-200 relative">
                           <div class="text-5xl mb-3">💾</div>
                           <h3 class="text-xl font-semibold text-blue-700">Physical Level</h3>
                           <p class="text-gray-500">How data is stored.</p>
                            <div class="level-details absolute bottom-full left-0 right-0 mb-2 p-3 bg-gray-800 text-white text-sm rounded-lg shadow-lg w-full z-20">
                               The lowest level, describing the actual physical storage structures like files, B-trees, and indexes. This is handled by the DBMS.
                           </div>
                       </div>
                   </div>
               </div>
               
               <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">ANSI/SPARC 3-Tier Architecture</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">This standard architecture model provides data independence, meaning the schema at one level can be changed without affecting the schemas at higher levels. Hover over each tier.</p>
                   <div class="bg-white p-8 rounded-lg shadow-sm border border-gray-200 flex flex-col items-center space-y-4">
                       <div class="arch-tier relative w-full md:w-3/4 lg:w-1/2 bg-blue-100 p-4 rounded-lg text-center shadow">
                           <h4 class="text-lg font-semibold text-blue-800">External Level (Views)</h4>
                            <div class="level-details absolute bottom-full left-0 right-0 mb-2 p-3 bg-gray-800 text-white text-sm rounded-lg shadow-lg w-full z-20">User applications and individual user views of the data.</div>
                       </div>
                       <div class="w-full flex justify-center items-center text-gray-500 font-semibold">
                           <span class="border-l-2 border-r-2 border-dashed border-gray-400 h-8 w-0"></span>
                           <span class="mx-2">External/Conceptual Mapping</span>
                           <span class="border-l-2 border-r-2 border-dashed border-gray-400 h-8 w-0"></span>
                       </div>
                       <div class="arch-tier relative w-full md:w-3/4 lg:w-1/2 bg-indigo-100 p-4 rounded-lg text-center shadow">
                           <h4 class="text-lg font-semibold text-indigo-800">Conceptual/Logical Level</h4>
                           <div class="level-details absolute bottom-full left-0 right-0 mb-2 p-3 bg-gray-800 text-white text-sm rounded-lg shadow-lg w-full z-20">A community view of the database. It defines all entities, attributes, and relationships.</div>
                       </div>
                       <div class="w-full flex justify-center items-center text-gray-500 font-semibold">
                            <span class="border-l-2 border-r-2 border-dashed border-gray-400 h-8 w-0"></span>
                           <span class="mx-2">Conceptual/Internal Mapping</span>
                            <span class="border-l-2 border-r-2 border-dashed border-gray-400 h-8 w-0"></span>
                       </div>
                       <div class="arch-tier relative w-full md:w-3/4 lg:w-1/2 bg-purple-100 p-4 rounded-lg text-center shadow">
                           <h4 class="text-lg font-semibold text-purple-800">Internal/Physical Level</h4>
                           <div class="level-details absolute bottom-full left-0 right-0 mb-2 p-3 bg-gray-800 text-white text-sm rounded-lg shadow-lg w-full z-20">The physical representation of the database on the computer.</div>
                       </div>
                   </div>
               </div>
           </section>

           <section id="models" class="content-section space-y-16">
                <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">Core Data Models</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">Data models provide the tools to describe data, relationships, and constraints. The two most fundamental models in database design are the Entity-Relationship model for conceptual design and the Relational model for implementation.</p>
                   <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3">Entity-Relationship (E-R) Model</h3>
                           <p class="text-gray-700 mb-4">A high-level, conceptual model that describes the real world in terms of **entities** (objects) and the **relationships** between them. It's used during initial design to map out the structure.</p>
                           <p class="font-semibold">Example:</p>
                           <div class="font-mono bg-gray-100 p-3 rounded-md text-sm text-gray-800 mt-2">[Student] -- (Enrolls In) -- [Course]</div>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3">Relational Model</h3>
                           <p class="text-gray-700 mb-4">This model organizes data into two-dimensional **tables** (relations). E-R diagrams are typically converted into a relational schema for implementation.</p>
                           <p class="font-semibold">Example Tables:</p>
                           <div class="font-mono bg-gray-100 p-3 rounded-md text-sm text-gray-800 mt-2">
                               <p>STUDENTS(<u>StudentID</u>, Name)</p>
                               <p>COURSES(<u>CourseID</u>, Title)</p>
                           </div>
                       </div>
                   </div>
               </div>
               <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">Database Languages</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">Databases use specialized languages to define structure, manipulate data, and control access.</p>
                   <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3">DDL</h3>
                           <p class="text-gray-500 mb-2 font-semibold">Data Definition Language</p>
                           <p class="text-gray-700 mb-4">Defines the database schema (structure).</p>
                           <p class="font-mono bg-gray-100 p-3 rounded-md text-sm text-gray-800">CREATE, ALTER, DROP</p>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3">DML</h3>
                           <p class="text-gray-500 mb-2 font-semibold">Data Manipulation Language</p>
                           <p class="text-gray-700 mb-4">Accesses and manipulates the data itself.</p>
                           <p class="font-mono bg-gray-100 p-3 rounded-md text-sm text-gray-800">SELECT, INSERT, UPDATE</p>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3">DCL</h3>
                           <p class="text-gray-500 mb-2 font-semibold">Data Control Language</p>
                           <p class="text-gray-700 mb-4">Manages access rights and permissions.</p>
                           <p class="font-mono bg-gray-100 p-3 rounded-md text-sm text-gray-800">GRANT, REVOKE</p>
                       </div>
                   </div>
               </div>
           </section>

           <section id="systems" class="content-section space-y-16">
                <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">Database Users</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">Different people interact with a database system in various ways, from end-users who see a simple interface to programmers who build complex applications. They can be classified by their level of technical interaction.</p>
                   <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200 text-center">
                           <div class="text-4xl mb-3">👤</div>
                           <h3 class="text-xl font-semibold">Naïve Users</h3>
                           <p class="text-gray-600">Interact through user-friendly interfaces of pre-written applications (e.g., bank tellers, web shoppers).</p>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200 text-center">
                           <div class="text-4xl mb-3">👨‍💻</div>
                           <h3 class="text-xl font-semibold">Application Programmers</h3>
                           <p class="text-gray-600">Computer professionals who write programs that access the database using DML calls via an API.</p>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200 text-center">
                           <div class="text-4xl mb-3">👩‍🔬</div>
                           <h3 class="text-xl font-semibold">Sophisticated Users</h3>
                           <p class="text-gray-600">Analysts or scientists who formulate their own queries directly using a query language like SQL to explore data.</p>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200 text-center">
                           <div class="text-4xl mb-3">🧑‍🚀</div>
                           <h3 class="text-xl font-semibold">Specialized Users</h3>
                           <p class="text-gray-600">Develop specialized, non-traditional applications like CAD, expert systems, or knowledge bases.</p>
                       </div>
                   </div>
               </div>
               <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">DBMS System Architecture</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">A DBMS is a complex software system with several key components that work together to manage data efficiently and reliably. This diagram shows a more detailed view of its internal structure.</p>
                   <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                       <div class="text-center font-semibold text-lg mb-4">User / DBA</div>
                       <div class="flex justify-center mb-2"><div class="border-l-2 border-dashed border-gray-400 h-6 w-0"></div></div>
                       <div class="grid grid-cols-1 md:grid-cols-2 gap-4 border-2 border-gray-300 p-4 rounded-lg">
                           <div class="border-2 border-indigo-200 p-4 rounded-lg bg-indigo-50">
                               <h4 class="font-semibold text-indigo-800 text-center text-lg">Query Processor</h4>
                               <div class="mt-2 space-y-2 text-sm">
                                   <div class="bg-indigo-100 p-2 rounded"><strong>DDL Interpreter:</strong> Processes schema definitions.</div>
                                   <div class="bg-indigo-100 p-2 rounded"><strong>DML Compiler:</strong> Translates queries and performs optimization.</div>
                                   <div class="bg-indigo-100 p-2 rounded"><strong>Query Evaluation Engine:</strong> Executes the optimized plan.</div>
                               </div>
                           </div>
                           <div class="border-2 border-purple-200 p-4 rounded-lg bg-purple-50">
                               <h4 class="font-semibold text-purple-800 text-center text-lg">Storage Manager</h4>
                                <div class="mt-2 space-y-2 text-sm">
                                   <div class="bg-purple-100 p-2 rounded"><strong>Transaction Manager:</strong> Ensures atomicity and consistency.</div>
                                   <div class="bg-purple-100 p-2 rounded"><strong>File Manager:</strong> Manages disk space allocation.</div>
                                   <div class="bg-purple-100 p-2 rounded"><strong>Buffer Manager:</strong> Manages data transfer between disk and memory.</div>
                               </div>
                           </div>
                       </div>
                       <div class="flex justify-center mt-2"><div class="border-l-2 border-dashed border-gray-400 h-6 w-0"></div></div>
                       <div class="text-center font-semibold text-lg mt-2 p-4 rounded-lg bg-gray-100">Disk Storage (Data, Dictionary, Indexes)</div>
                   </div>
               </div>
               <div>
                   <h2 class="text-3xl font-bold mb-4 text-center">Application Architectures</h2>
                   <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">Applications that use a database typically follow one of two main architectural patterns.</p>
                   <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3 text-center">Two-Tier Architecture</h3>
                           <div class="flex flex-col items-center space-y-4 mt-4">
                               <div class="p-3 bg-blue-100 rounded-lg w-3/4 text-center font-semibold">Client</div>
                               <div class="text-xl">↔️</div>
                               <div class="p-3 bg-green-100 rounded-lg w-3/4 text-center font-semibold">Database Server</div>
                           </div>
                           <p class="text-gray-600 mt-4">The client application communicates directly with the database server. This is common for traditional desktop applications.</p>
                       </div>
                       <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                           <h3 class="text-2xl font-semibold mb-3 text-center">Three-Tier Architecture</h3>
                           <div class="flex flex-col items-center space-y-4 mt-4">
                               <div class="p-3 bg-blue-100 rounded-lg w-3/4 text-center font-semibold">Client (Browser)</div>
                               <div class="text-xl">↔️</div>
                               <div class="p-3 bg-yellow-100 rounded-lg w-3/4 text-center font-semibold">Application Server</div>
                                <div class="text-xl">↔️</div>
                               <div class="p-3 bg-green-100 rounded-lg w-3/4 text-center font-semibold">Database Server</div>
                           </div>
                            <p class="text-gray-600 mt-4">An intermediary application server sits between the client and the database. This is the standard for web applications.</p>
                       </div>
                   </div>
               </div>
           </section>

           <section id="quiz" class="content-section">
               <h2 class="text-3xl font-bold mb-4 text-center">Test Your Knowledge</h2>
               <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">Check your understanding of the fundamental concepts with this short quiz. Click on each question to reveal its answer.</p>
               <div id="quiz-container" class="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-sm border border-gray-200">
               </div>
           </section>

           <section id="glossary" class="content-section">
               <h2 class="text-3xl font-bold mb-4 text-center">Glossary of Key Terms</h2>
               <p class="text-center text-gray-600 max-w-3xl mx-auto mb-8">Use the search bar below to quickly find definitions for important database terminology.</p>
               <div class="max-w-4xl mx-auto">
                   <input type="text" id="glossary-search" placeholder="Search for a term..." class="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-6">
                   <div id="glossary-list" class="space-y-4"></div>
               </div>
           </section>
       </main>
   </div>

<script>
document.addEventListener('DOMContentLoaded', function() {
   const data = {
       drawbacks: [
           { title: "Data redundancy and inconsistency", solution: "Controls redundancy by storing data in a single location, ensuring consistency." },
           { title: "Difficulty in accessing data", solution: "Provides query languages (like SQL) and application interfaces (APIs) for easy and standardized data access." },
           { title: "Data isolation", solution: "Integrates data into a single logical structure, overcoming the issue of scattered and incompatible files." },
           { title: "Integrity problems", solution: "Enforces integrity constraints (e.g., data types, uniqueness) at the schema level, independent of application code." },
           { title: "Atomicity of updates", solution: "Uses transaction management to ensure that updates are 'all-or-nothing', preventing partial and inconsistent states." },
           { title: "Concurrent access issues", solution: "Implements concurrency control mechanisms to manage simultaneous access and prevent conflicts between users." },
           { title: "Security problems", solution: "Provides robust security and authorization features to control who can access and modify data." }
       ],
       quiz: [
           { q: "What are two significant drawbacks of using traditional file systems for data storage?", a: "Two significant drawbacks are data redundancy and inconsistency, where information is duplicated across different files, leading to update anomalies. Additionally, file systems suffer from data isolation, making it difficult to integrate data from multiple, disparate files and formats." },
           { q: "Briefly explain the primary purpose of a Database Management System (DBMS).", a: "The primary purpose of a DBMS is to provide an efficient and convenient environment for storing, managing, and accessing interrelated data. It aims to overcome the limitations of file systems by offering solutions for data consistency, integrity, and controlled access." },
           { q: "Describe the difference between the physical level and the logical level of data abstraction.", a: "The physical level describes how data is actually stored on storage devices, detailing complex data structures used for efficiency. In contrast, the logical level describes what data is stored in the database and the relationships among that data, without needing to know the underlying physical implementation details." },
           { q: "Define what a 'schema' is in the context of a database, and how it differs from an 'instance'.", a: "A schema represents the overall design and structure of a database, defining the types of data, relationships, and constraints. An instance, however, refers to the collection of actual information stored in the database at a particular moment in time, which changes as data is added, deleted, or modified." },
           { q: "What is the main role of the Entity-Relationship (E-R) model in database design?", a: "The main role of the Entity-Relationship model is to provide a high-level conceptual design of the database. It helps to model the real world in terms of entities (objects) and the relationships between them, making it widely used for the initial conceptualisation phase of database development." },
           { q: "Explain the function of Data Definition Language (DDL) and provide an example of what it is used for.", a: "Data Definition Language (DDL) is a specification notation used to define and modify the database schema. For example, CREATE TABLE is a DDL command used to create a new table, specifying its name and the data types of its columns." },
           { q: "Distinguish between procedural and non-procedural Data Manipulation Languages (DMLs).", a: "Procedural DMLs require the user to specify both what data is required and how to retrieve it, detailing the steps for data access. Non-procedural DMLs, like SQL, only require the user to specify what data is needed, leaving the system to determine the most efficient way to retrieve it." },
           { q: "Identify two key responsibilities of a Database Administrator (DBA).", a: "Two key responsibilities of a DBA include schema definition and modification, where they design and adjust the database structure to meet enterprise needs. Another crucial duty is granting user authority to access the database and specifying integrity constraints to maintain data quality and security." },
           { q: "What is the purpose of the transaction-management component in a DBMS?", a: "The transaction-management component's purpose is to ensure that the database remains in a consistent and correct state, even in the event of system failures (like power outages) or transaction failures. It guarantees that operations within a transaction either fully complete or have no effect at all (atomicity)." },
           { q: "Describe the main function of the DML compiler within the Query Processor.", a: "The DML compiler's main function is to translate DML statements (queries) into an evaluation plan, which consists of low-level instructions understandable by the query engine. Crucially, it also performs query optimisation, selecting the most efficient and lowest-cost execution plan from various alternatives." }
       ],
       glossary: [
           { term: "Atomicity", def: "A property of transactions ensuring that all operations within a transaction are either completely performed or none of them are." },
           { term: "Attributes", def: "The columns in a relational table, representing properties or characteristics of the entities being stored." },
           { term: "Concurrency Control Manager", def: "A component of the DBMS that ensures correct execution of concurrent transactions." },
           { term: "Conceptual Schema", def: "The overall logical design of a database, describing what data is stored and the relationships among that data." },
           { term: "Data Abstraction", def: "The process of hiding complex internal details of how data is stored and maintained, presenting users with a simplified view." },
           { term: "Data Definition Language (DDL)", def: "A language used to define, modify, and delete the structure (schema) of a database." },
           { term: "Data Dictionary", def: "A repository within the DBMS that stores metadata (data about data)." },
           { term: "Data Isolation", def: "A drawback of file systems where data is scattered in various files and formats." },
           { term: "Data Manipulation Language (DML)", def: "A language used for accessing and manipulating data within a database." },
           { term: "Data Model", def: "A collection of conceptual tools used for describing data, relationships, semantics, and constraints." },
           { term: "Database Administrator (DBA)", def: "A professional responsible for the overall management and operation of a database system." },
           { term: "Database Management System (DBMS)", def: "A software system that acts as an interface between the database and its users." },
           { term: "Entities", def: "Objects or concepts in the real world that are represented in a database." },
           { term: "Entity-Relationship (E-R) Model", def: "A high-level conceptual data model used during the initial design phase." },
           { term: "Instance", def: "The actual data stored in a database at a particular moment in time." },
           { term: "Integrity Constraints", def: "Rules that ensure the validity and consistency of data in a database." },
           { term: "Logical Schema", def: "See Conceptual Schema." },
           { term: "Metadata", def: "Data about data; information that describes the structure and properties of the data." },
           { term: "Query Optimisation", def: "The process of choosing the most efficient execution plan for a given query." },
           { term: "Relational Model", def: "A data model in which data is organised into two-dimensional tables called relations." },
           { term: "Schema", def: "The overall design or structure of a database." },
           { term: "SQL (Structured Query Language)", def: "A widely used non-procedural language for managing and querying relational databases." },
           { term: "Transaction", def: "A logical unit of work in a database that must either completely succeed or completely fail." },
           { term: "Transaction Management", def: "A DBMS component that ensures database consistency despite system failures and manages concurrent access." }
       ]
   };

   const navLinks = document.querySelectorAll('.nav-link');
   const contentSections = document.querySelectorAll('.content-section');
   let userCounter = 3;

   function updateContent(hash) {
       hash = hash || window.location.hash || '#foundations';
       
       contentSections.forEach(section => {
           section.classList.remove('active');
       });
       navLinks.forEach(link => {
           link.classList.remove('active');
       });
       
       const activeSection = document.querySelector(hash);
       const activeLink = document.querySelector(`.nav-link[href="${hash}"]`);

       if (activeSection && activeLink) {
           activeSection.classList.add('active');
           activeLink.classList.add('active');
           // Trigger animation on new section
           const animatedElements = activeSection.querySelectorAll('.fade-in');
           animatedElements.forEach(el => {
               el.style.animation = 'none';
               el.offsetHeight; /* trigger reflow */
               el.style.animation = null; 
           });
       } else {
           document.querySelector('#foundations').classList.add('active');
           document.querySelector('.nav-link[href="#foundations"]').classList.add('active');
       }
   }

   navLinks.forEach(link => {
       link.addEventListener('click', (e) => {
           e.preventDefault();
           const hash = e.target.getAttribute('href');
           history.pushState(null, null, hash);
           updateContent(hash);
       });
   });

   window.addEventListener('popstate', () => updateContent(window.location.hash));
   
   function initDrawbacks() {
       const listContainer = document.getElementById('drawbacks-list');
       const solutionDisplay = document.getElementById('solution-display');
       
       data.drawbacks.forEach((item, index) => {
           const div = document.createElement('div');
           div.className = 'drawback-item p-3 rounded-md cursor-pointer border-l-4 border-transparent hover:bg-gray-100';
           div.textContent = item.title;
           div.dataset.index = index;
           listContainer.appendChild(div);
       });

       listContainer.addEventListener('click', (e) => {
           if (e.target.classList.contains('drawback-item')) {
               const allItems = listContainer.querySelectorAll('.drawback-item');
               allItems.forEach(item => item.classList.remove('active'));
               
               e.target.classList.add('active');
               const index = e.target.dataset.index;
               solutionDisplay.innerHTML = `<p class="text-lg fade-in">${data.drawbacks[index].solution}</p>`;
           }
       });
   }

   function initInstanceSimulator() {
       const btn = document.getElementById('add-instance-btn');
       const tableBody = document.getElementById('instance-table-body');
       const names = ["Charlie", "Dana", "Eve", "Frank"];

       btn.addEventListener('click', () => {
           if (userCounter > 6) return; // Limit additions
           const name = names[userCounter - 3];
           const newRow = document.createElement('tr');
           newRow.className = userCounter % 2 === 0 ? 'bg-gray-50 instance-row' : 'bg-white instance-row';
           newRow.innerHTML = `
               <td class="p-2">${userCounter}</td>
               <td class="p-2">${name}</td>
               <td class="p-2">${name.toLowerCase()}@web.com</td>
           `;
           tableBody.appendChild(newRow);
           userCounter++;
           if (userCounter > 6) {
               btn.disabled = true;
               btn.textContent = "Table Full";
               btn.classList.add('bg-gray-400', 'cursor-not-allowed');
               btn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
           }
       });
   }

   function initQuiz() {
       const container = document.getElementById('quiz-container');
       data.quiz.forEach((item, index) => {
           const div = document.createElement('div');
           div.className = 'quiz-question border-b border-gray-200 last:border-b-0 py-4';
           div.innerHTML = `
               <div class="flex justify-between items-center">
                   <h4 class="text-lg font-medium text-gray-800">${index + 1}. ${item.q}</h4>
                   <span class="text-blue-500 transform transition-transform duration-300">▼</span>
               </div>
               <div class="quiz-answer text-gray-600">
                   <p>${item.a}</p>
               </div>
           `;
           container.appendChild(div);
       });

       container.addEventListener('click', (e) => {
           const question = e.target.closest('.quiz-question');
           if (question) {
               question.classList.toggle('open');
               const icon = question.querySelector('span');
               icon.style.transform = question.classList.contains('open') ? 'rotate(180deg)' : 'rotate(0deg)';
           }
       });
   }

   function initGlossary() {
       const searchInput = document.getElementById('glossary-search');
       const listContainer = document.getElementById('glossary-list');

       function renderGlossary(filter = '') {
           listContainer.innerHTML = '';
           const filteredData = data.glossary.filter(item => 
               item.term.toLowerCase().includes(filter.toLowerCase()) ||
               item.def.toLowerCase().includes(filter.toLowerCase())
           ).sort((a, b) => a.term.localeCompare(b.term));

           if (filteredData.length === 0) {
               listContainer.innerHTML = `<p class="text-gray-500">No terms found.</p>`;
               return;
           }

           filteredData.forEach(item => {
               const div = document.createElement('div');
               div.className = 'bg-white p-4 rounded-lg shadow-sm border border-gray-200';
               div.innerHTML = `
                   <h4 class="text-xl font-semibold text-gray-900">${item.term}</h4>
                   <p class="text-gray-700 mt-1">${item.def}</p>
               `;
               listContainer.appendChild(div);
           });
       }

       searchInput.addEventListener('input', (e) => {
           renderGlossary(e.target.value);
       });

       renderGlossary();
   }

   initDrawbacks();
   initInstanceSimulator();
   initQuiz();
   initGlossary();
   updateContent();
});
</script>

</body>
</html>